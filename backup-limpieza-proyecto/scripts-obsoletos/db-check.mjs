import pg from "pg";

console.log("üîç VERIFICANDO CONEXI√ìN A BASE DE DATOS...");
console.log("=====================================");

try {
  // Verificar que existe la variable de entorno
  if (!process.env.DATABASE_URL) {
    console.log("‚ùå ERROR: Variable DATABASE_URL no encontrada");
    console.log("   Verifica que existe en tu archivo .env.local");
    process.exit(1);
  }

  console.log("‚úÖ Variable DATABASE_URL encontrada");
  console.log("üîó Intentando conectar a:", process.env.DATABASE_URL.replace(/:[^:@]*@/, ':****@'));

  // Crear cliente PostgreSQL
  const client = new pg.Client({ 
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false,
      require: true
    }
  });

  // Conectar
  console.log("‚è≥ Conectando...");
  await client.connect();
  console.log("‚úÖ Conexi√≥n establecida exitosamente");

  // Ejecutar query de prueba
  console.log("‚è≥ Ejecutando query de prueba...");
  const result = await client.query("SELECT NOW() as current_time, version() as db_version");
  
  console.log("‚úÖ Query ejecutado exitosamente");
  console.log("üìÖ Tiempo actual DB:", result.rows[0].current_time);
  console.log("üóÑÔ∏è  Versi√≥n PostgreSQL:", result.rows[0].db_version.split(' ')[0] + ' ' + result.rows[0].db_version.split(' ')[1]);

  // Verificar si existen tablas
  console.log("‚è≥ Verificando tablas existentes...");
  const tablesResult = await client.query(`
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    ORDER BY table_name
  `);

  if (tablesResult.rows.length > 0) {
    console.log("‚úÖ Tablas encontradas:");
    tablesResult.rows.forEach(row => {
      console.log("   üìã", row.table_name);
    });
  } else {
    console.log("‚ö†Ô∏è  No se encontraron tablas en el schema 'public'");
    console.log("   Esto es normal si no has ejecutado las migraciones de Prisma");
  }

  // Cerrar conexi√≥n
  await client.end();
  console.log("‚úÖ Conexi√≥n cerrada correctamente");
  
  console.log("\nüéâ RESULTADO: BASE DE DATOS COMPLETAMENTE FUNCIONAL");
  console.log("=====================================");

} catch (error) {
  console.log("‚ùå ERROR DE CONEXI√ìN:");
  console.log("=====================================");
  
  if (error.code === 'ENOTFOUND') {
    console.log("üîç Problema: Servidor no encontrado");
    console.log("   - Verifica que la URL de Supabase sea correcta");
    console.log("   - El proyecto Supabase podr√≠a estar pausado o eliminado");
  } else if (error.code === 'ECONNREFUSED') {
    console.log("üîç Problema: Conexi√≥n rechazada");
    console.log("   - El servidor existe pero rechaza la conexi√≥n");
    console.log("   - Verifica las credenciales de acceso");
  } else if (error.message.includes('password authentication failed')) {
    console.log("üîç Problema: Credenciales incorrectas");
    console.log("   - Verifica el usuario y contrase√±a en DATABASE_URL");
  } else {
    console.log("üîç Error t√©cnico:", error.message);
    console.log("üîç C√≥digo de error:", error.code);
  }
  
  console.log("\nüí° SOLUCIONES SUGERIDAS:");
  console.log("1. Verifica que el proyecto Supabase est√© activo");
  console.log("2. Regenera las credenciales en Supabase Dashboard");
  console.log("3. Actualiza la variable DATABASE_URL en .env.local");
  
  process.exit(1);
}
