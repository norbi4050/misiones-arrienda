-- =====================================================
-- üîß SQL DE CORRECCI√ìN PARA ERRORES FASE 2
-- PROYECTO MISIONES ARRIENDA - ENERO 2025
-- =====================================================

-- CORRECCI√ìN 1: Arreglar comparaci√≥n text = uuid en pol√≠ticas RLS
-- =====================================================

-- Eliminar pol√≠ticas problem√°ticas y recrearlas con cast correcto
DROP POLICY IF EXISTS "Users can update their own property images" ON storage.objects;
DROP POLICY IF EXISTS "Users can delete their own property images" ON storage.objects;

-- Recrear pol√≠ticas con cast correcto
CREATE POLICY "Users can update their own property images"
ON storage.objects FOR UPDATE
USING (
  bucket_id = 'property-images' 
  AND (
    auth.uid()::text = (storage.foldername(name))[1]
    OR EXISTS (
      SELECT 1 FROM "User" 
      WHERE id::text = auth.uid()::text 
      AND role = 'ADMIN'
    )
  )
);

CREATE POLICY "Users can delete their own property images"
ON storage.objects FOR DELETE
USING (
  bucket_id = 'property-images' 
  AND (
    auth.uid()::text = (storage.foldername(name))[1]
    OR EXISTS (
      SELECT 1 FROM "User" 
      WHERE id::text = auth.uid()::text 
      AND role = 'ADMIN'
    )
  )
);

-- CORRECCI√ìN 2: Pol√≠ticas para avatares (si faltan)
-- =====================================================

-- Pol√≠tica para subir avatar propio
CREATE POLICY IF NOT EXISTS "Users can upload their own avatar"
ON storage.objects FOR INSERT
WITH CHECK (
  bucket_id = 'user-avatars' 
  AND auth.role() = 'authenticated'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

-- Pol√≠tica para actualizar avatar propio
CREATE POLICY IF NOT EXISTS "Users can update their own avatar"
ON storage.objects FOR UPDATE
USING (
  bucket_id = 'user-avatars' 
  AND auth.uid()::text = (storage.foldername(name))[1]
);

-- Pol√≠tica para eliminar avatar propio
CREATE POLICY IF NOT EXISTS "Users can delete their own avatar"
ON storage.objects FOR DELETE
USING (
  bucket_id = 'user-avatars' 
  AND auth.uid()::text = (storage.foldername(name))[1]
);

-- CORRECCI√ìN 3: Funci√≥n get_public_image_url mejorada
-- =====================================================

-- Recrear funci√≥n con configuraci√≥n din√°mica
CREATE OR REPLACE FUNCTION get_public_image_url(bucket_name text, file_path text)
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  supabase_url text;
BEGIN
  -- Intentar obtener la URL de configuraci√≥n, si no usar valor por defecto
  BEGIN
    supabase_url := current_setting('app.settings.supabase_url', true);
  EXCEPTION WHEN OTHERS THEN
    -- Si no est√° configurado, usar la URL actual del proyecto
    SELECT split_part(current_setting('request.headers')::json->>'host', '.', 1) INTO supabase_url;
    supabase_url := 'https://' || supabase_url || '.supabase.co';
  END;
  
  -- Si a√∫n no tenemos URL, usar formato gen√©rico
  IF supabase_url IS NULL OR supabase_url = '' THEN
    supabase_url := 'https://your-project.supabase.co';
  END IF;
  
  RETURN format('%s/storage/v1/object/public/%s/%s', 
    supabase_url,
    bucket_name, 
    file_path
  );
END;
$$;

-- CORRECCI√ìN 4: √çndices (solo si no existen)
-- =====================================================

-- Crear √≠ndices solo si no existen (evitar errores de permisos)
DO $$
BEGIN
  -- √çndice para bucket_id y name
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE tablename = 'objects' 
    AND schemaname = 'storage' 
    AND indexname = 'idx_storage_objects_bucket_name'
  ) THEN
    CREATE INDEX idx_storage_objects_bucket_name 
    ON storage.objects (bucket_id, name);
  END IF;
  
  -- √çndice para bucket_id y owner
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE tablename = 'objects' 
    AND schemaname = 'storage' 
    AND indexname = 'idx_storage_objects_owner'
  ) THEN
    CREATE INDEX idx_storage_objects_owner 
    ON storage.objects (bucket_id, owner);
  END IF;
  
EXCEPTION WHEN insufficient_privilege THEN
  -- Si no tenemos permisos, continuar sin crear √≠ndices
  RAISE NOTICE 'No se pudieron crear √≠ndices por permisos, pero no es cr√≠tico';
END $$;

-- CORRECCI√ìN 5: Verificar que RLS est√© habilitado
-- =====================================================

-- Verificar que RLS est√© habilitado en storage.objects
DO $$
BEGIN
  -- Intentar habilitar RLS si no est√° habilitado
  ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;
EXCEPTION WHEN insufficient_privilege THEN
  -- Si no tenemos permisos, probablemente ya est√° habilitado
  RAISE NOTICE 'RLS ya est√° habilitado o no tenemos permisos para modificarlo';
END $$;

-- =====================================================
-- üß™ VERIFICACI√ìN FINAL
-- =====================================================

-- Verificar buckets
SELECT 
  '‚úÖ Verificaci√≥n buckets:' as status,
  id,
  name,
  public,
  file_size_limit
FROM storage.buckets
WHERE id IN ('property-images', 'user-avatars', 'verification-docs')
ORDER BY id;

-- Verificar pol√≠ticas
SELECT 
  '‚úÖ Verificaci√≥n pol√≠ticas:' as status,
  COUNT(*) as total_policies
FROM pg_policies 
WHERE schemaname = 'storage' 
AND tablename = 'objects';

-- Verificar funciones
SELECT 
  '‚úÖ Verificaci√≥n funciones:' as status,
  proname as function_name
FROM pg_proc 
WHERE proname IN ('get_public_image_url', 'cleanup_orphaned_images', 'cleanup_property_images');

-- Test de funci√≥n get_public_image_url
SELECT 
  '‚úÖ Test funci√≥n URL:' as status,
  get_public_image_url('property-images', 'test/image.jpg') as sample_url;

-- =====================================================
-- üéâ CORRECCI√ìN COMPLETADA
-- =====================================================

SELECT 'üéâ CORRECCI√ìN DE ERRORES COMPLETADA' as resultado;
SELECT '‚úÖ Configuraci√≥n de Storage lista para usar' as estado;
SELECT 'üöÄ Pr√≥ximo paso: Ejecutar migraci√≥n de im√°genes' as siguiente;
