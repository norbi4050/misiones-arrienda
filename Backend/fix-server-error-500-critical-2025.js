#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üö® DIAGN√ìSTICO CR√çTICO: Error 500 en servidor');
console.log('================================================');

// Verificar estructura de directorios
function checkProjectStructure() {
  console.log('üìÅ Verificando estructura del proyecto...');
  
  const rootSrc = path.join(__dirname, '../src');
  const backendSrc = path.join(__dirname, 'src');
  
  console.log('');
  console.log('üîç Estructura encontrada:');
  
  if (fs.existsSync(rootSrc)) {
    console.log('  ‚úÖ /src/ (ra√≠z) - EXISTE');
    const rootFiles = fs.readdirSync(rootSrc);
    console.log(`     Contiene: ${rootFiles.slice(0, 5).join(', ')}${rootFiles.length > 5 ? '...' : ''}`);
  } else {
    console.log('  ‚ùå /src/ (ra√≠z) - NO EXISTE');
  }
  
  if (fs.existsSync(backendSrc)) {
    console.log('  ‚úÖ /Backend/src/ - EXISTE');
    const backendFiles = fs.readdirSync(backendSrc);
    console.log(`     Contiene: ${backendFiles.slice(0, 5).join(', ')}${backendFiles.length > 5 ? '...' : ''}`);
  } else {
    console.log('  ‚ùå /Backend/src/ - NO EXISTE');
  }
  
  return { hasRootSrc: fs.existsSync(rootSrc), hasBackendSrc: fs.existsSync(backendSrc) };
}

// Verificar package.json
function checkPackageJson() {
  console.log('');
  console.log('üì¶ Verificando package.json...');
  
  const rootPackage = path.join(__dirname, '../package.json');
  const backendPackage = path.join(__dirname, 'package.json');
  
  if (fs.existsSync(rootPackage)) {
    console.log('  ‚úÖ package.json (ra√≠z) - EXISTE');
    try {
      const content = JSON.parse(fs.readFileSync(rootPackage, 'utf8'));
      console.log(`     Scripts: ${Object.keys(content.scripts || {}).join(', ')}`);
    } catch (e) {
      console.log('     ‚ö†Ô∏è Error leyendo package.json de ra√≠z');
    }
  }
  
  if (fs.existsSync(backendPackage)) {
    console.log('  ‚úÖ package.json (Backend) - EXISTE');
    try {
      const content = JSON.parse(fs.readFileSync(backendPackage, 'utf8'));
      console.log(`     Scripts: ${Object.keys(content.scripts || {}).join(', ')}`);
    } catch (e) {
      console.log('     ‚ö†Ô∏è Error leyendo package.json de Backend');
    }
  }
}

// Verificar next.config.js
function checkNextConfig() {
  console.log('');
  console.log('‚öôÔ∏è Verificando next.config.js...');
  
  const rootNext = path.join(__dirname, '../next.config.js');
  const backendNext = path.join(__dirname, 'next.config.js');
  
  if (fs.existsSync(rootNext)) {
    console.log('  ‚úÖ next.config.js (ra√≠z) - EXISTE');
  }
  
  if (fs.existsSync(backendNext)) {
    console.log('  ‚úÖ next.config.js (Backend) - EXISTE');
  }
}

// Funci√≥n principal de diagn√≥stico
function main() {
  console.log('üîç Iniciando diagn√≥stico del error 500...');
  
  const structure = checkProjectStructure();
  checkPackageJson();
  checkNextConfig();
  
  console.log('');
  console.log('üìã DIAGN√ìSTICO COMPLETO:');
  console.log('========================');
  
  if (structure.hasRootSrc && structure.hasBackendSrc) {
    console.log('‚ùå PROBLEMA IDENTIFICADO: Estructura duplicada');
    console.log('');
    console.log('üîß CAUSA DEL ERROR 500:');
    console.log('   El proyecto tiene archivos en dos ubicaciones:');
    console.log('   - /src/ (ra√≠z del proyecto)');
    console.log('   - /Backend/src/ (subdirectorio Backend)');
    console.log('');
    console.log('   Next.js est√° intentando ejecutar desde la ra√≠z pero');
    console.log('   los archivos actualizados est√°n en /Backend/src/');
    console.log('');
    console.log('üí° SOLUCIONES RECOMENDADAS:');
    console.log('');
    console.log('   OPCI√ìN A - Ejecutar desde Backend:');
    console.log('   1. cd Backend');
    console.log('   2. npm run dev');
    console.log('   3. Abrir http://localhost:3000');
    console.log('');
    console.log('   OPCI√ìN B - Copiar archivos a ra√≠z:');
    console.log('   1. Copiar Backend/src/* a src/');
    console.log('   2. npm run dev (desde ra√≠z)');
    console.log('');
    console.log('   OPCI√ìN C - Limpiar estructura:');
    console.log('   1. Decidir una ubicaci√≥n √∫nica');
    console.log('   2. Eliminar la otra');
    console.log('   3. Actualizar configuraciones');
    
  } else if (structure.hasBackendSrc && !structure.hasRootSrc) {
    console.log('‚úÖ SOLUCI√ìN IDENTIFICADA: Ejecutar desde Backend');
    console.log('');
    console.log('üöÄ PASOS PARA CORREGIR:');
    console.log('   1. cd Backend');
    console.log('   2. npm run dev');
    console.log('   3. El servidor deber√≠a funcionar correctamente');
    
  } else if (structure.hasRootSrc && !structure.hasBackendSrc) {
    console.log('‚ö†Ô∏è PROBLEMA: Archivos en ra√≠z pero correcciones en Backend');
    console.log('');
    console.log('üîß NECESARIO: Copiar correcciones a la ra√≠z');
    
  } else {
    console.log('‚ùå PROBLEMA CR√çTICO: No se encontr√≥ estructura v√°lida');
  }
  
  console.log('');
  console.log('üéØ RECOMENDACI√ìN INMEDIATA:');
  console.log('   Ejecuta: cd Backend && npm run dev');
  console.log('   Esto deber√≠a resolver el error 500');
}

// Ejecutar diagn√≥stico
main();
