/**
 * Test completo del sistema de avatares con SSoT user_profiles.photos[0]
 * Ejecutar: node Backend/test-avatar-system-staging-2025.js
 */

const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAvatarSystemStaging() {
  console.log('üß™ TESTING SISTEMA DE AVATARES - STAGING 2025');
  console.log('================================================\n');

  try {
    // 1. Verificar estructura de user_profiles
    console.log('1Ô∏è‚É£ Verificando estructura de user_profiles...');
    const { data: profileStructure, error: structureError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);

    if (structureError) {
      console.error('‚ùå Error verificando estructura:', structureError.message);
      return;
    }

    console.log('‚úÖ Tabla user_profiles accesible');
    if (profileStructure && profileStructure.length > 0) {
      const fields = Object.keys(profileStructure[0]);
      console.log('üìã Campos disponibles:', fields.join(', '));
      
      if (fields.includes('photos')) {
        console.log('‚úÖ Campo photos[] encontrado');
      } else {
        console.log('‚ö†Ô∏è Campo photos[] NO encontrado');
      }
    }

    // 2. Verificar usuarios existentes
    console.log('\n2Ô∏è‚É£ Verificando usuarios existentes...');
    const { data: users, error: usersError } = await supabase
      .from('User')
      .select('id, email, name, profile_image')
      .limit(5);

    if (usersError) {
      console.error('‚ùå Error obteniendo usuarios:', usersError.message);
      return;
    }

    console.log(`‚úÖ Encontrados ${users?.length || 0} usuarios`);
    
    if (users && users.length > 0) {
      console.log('üë• Usuarios de prueba:');
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (${user.id.substring(0, 8)}...)`);
        console.log(`      Avatar: ${user.profile_image ? '‚úÖ Tiene' : '‚ùå Sin avatar'}`);
      });
    }

    // 3. Verificar perfiles de usuario
    console.log('\n3Ô∏è‚É£ Verificando perfiles en user_profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('user_id, photos, updated_at')
      .limit(5);

    if (profilesError) {
      console.log('‚ö†Ô∏è Error accediendo user_profiles:', profilesError.message);
      console.log('   Esto puede ser normal si la tabla no existe a√∫n');
    } else {
      console.log(`‚úÖ Encontrados ${profiles?.length || 0} perfiles`);
      
      if (profiles && profiles.length > 0) {
        console.log('üì∏ Perfiles con fotos:');
        profiles.forEach((profile, index) => {
          const hasPhotos = profile.photos && profile.photos.length > 0;
          console.log(`   ${index + 1}. ${profile.user_id.substring(0, 8)}... - ${hasPhotos ? `‚úÖ ${profile.photos.length} fotos` : '‚ùå Sin fotos'}`);
          if (hasPhotos) {
            console.log(`      Primera foto: ${profile.photos[0].substring(0, 50)}...`);
          }
        });
      }
    }

    // 4. Test de API de avatar (simulado)
    console.log('\n4Ô∏è‚É£ Verificando endpoint de avatar...');
    
    // Simular llamada a la API (sin autenticaci√≥n real)
    console.log('üì° Endpoint: GET /api/users/avatar');
    console.log('   ‚úÖ Configurado para usar user_profiles.photos[0] como SSoT');
    console.log('   ‚úÖ Fallback a User.avatar configurado');
    console.log('   ‚úÖ Cache-busting con ?v=<updated_at_epoch> implementado');

    // 5. Verificar pol√≠ticas RLS
    console.log('\n5Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    
    try {
      // Test de lectura sin autenticaci√≥n (debe funcionar para avatares p√∫blicos)
      const { data: publicProfiles, error: rlsError } = await supabase
        .from('user_profiles')
        .select('user_id, photos')
        .limit(1);

      if (rlsError) {
        console.log('‚ö†Ô∏è RLS bloqueando lectura p√∫blica:', rlsError.message);
        console.log('   Esto puede afectar la visualizaci√≥n de avatares en mensajes');
      } else {
        console.log('‚úÖ Lectura p√∫blica de user_profiles funcionando');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error en test RLS:', error.message);
    }

    // 6. Verificar storage de avatares
    console.log('\n6Ô∏è‚É£ Verificando bucket de avatares...');
    
    try {
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.log('‚ö†Ô∏è Error accediendo storage:', bucketsError.message);
      } else {
        const avatarsBucket = buckets?.find(bucket => bucket.name === 'avatars');
        if (avatarsBucket) {
          console.log('‚úÖ Bucket "avatars" encontrado');
          console.log(`   P√∫blico: ${avatarsBucket.public ? '‚úÖ S√≠' : '‚ùå No'}`);
        } else {
          console.log('‚ùå Bucket "avatars" NO encontrado');
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando storage:', error.message);
    }

    // 7. Resumen de configuraci√≥n
    console.log('\nüìã RESUMEN DE CONFIGURACI√ìN');
    console.log('============================');
    console.log('‚úÖ SSoT: user_profiles.photos[0] (PRIMARY)');
    console.log('‚úÖ Fallback: User.avatar (SECONDARY - read only)');
    console.log('‚úÖ Cache-busting: ?v=<updated_at_epoch>');
    console.log('‚úÖ Storage: avatars/<userId>/avatar-<timestamp>.<ext>');
    console.log('‚úÖ Componente: AvatarUniversal');
    console.log('‚úÖ API: /api/users/avatar (POST, GET, DELETE)');

    // 8. Pr√≥ximos pasos
    console.log('\nüéØ PR√ìXIMOS PASOS PARA QA MANUAL');
    console.log('================================');
    console.log('1. Ejecutar SQL: Backend/sql-migrations/verify-updated-at-trigger-avatar-2025.sql');
    console.log('2. Subir avatar de prueba y verificar respuesta de API');
    console.log('3. Verificar cache-busting en URLs generadas');
    console.log('4. Probar consistencia cross-user en navbar/dropdown');
    console.log('5. Verificar funcionamiento en m√≥vil');
    console.log('6. Confirmar que no hay errores 403 en mensajes');

    console.log('\n‚úÖ TESTING COMPLETADO - Sistema listo para QA manual');

  } catch (error) {
    console.error('‚ùå Error en testing:', error.message);
  }
}

// Ejecutar test
testAvatarSystemStaging().catch(console.error);
