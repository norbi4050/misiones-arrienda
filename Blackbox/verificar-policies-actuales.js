// =====================================================
// VERIFICACI√ìN DIRECTA: POL√çTICAS ACTUALES EN SUPABASE
// =====================================================

const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function verificarPoliciesActuales() {
    console.log('üîç VERIFICANDO POL√çTICAS ACTUALES EN SUPABASE');
    console.log('=' .repeat(60));

    try {
        // Obtener todas las pol√≠ticas
        const { data: policies, error } = await supabase.rpc('sql', {
            query: `
                SELECT
                    schemaname,
                    tablename,
                    policyname,
                    cmd,
                    roles,
                    qual
                FROM pg_policies
                WHERE schemaname = 'public'
                    AND tablename IN ('users', 'favorites', 'property_inquiries')
                ORDER BY tablename, policyname;
            `
        });

        if (error) {
            console.log('‚ùå Error:', error.message);
            return;
        }

        console.log(`üìä Total de pol√≠ticas encontradas: ${policies.length}`);
        console.log('');

        // Mostrar pol√≠ticas por tabla
        const tablas = ['users', 'favorites', 'property_inquiries'];

        for (const tabla of tablas) {
            console.log(`üìã POL√çTICAS PARA TABLA: ${tabla.toUpperCase()}`);
            console.log('-'.repeat(50));

            const policiesTabla = policies.filter(p => p.tablename === tabla);

            if (policiesTabla.length === 0) {
                console.log('‚ùå No hay pol√≠ticas para esta tabla');
            } else {
                policiesTabla.forEach(policy => {
                    console.log(`üîß Pol√≠tica: ${policy.policyname}`);
                    console.log(`   üìù Comando: ${policy.cmd}`);
                    console.log(`   üë• Roles: ${policy.roles.join(', ')}`);
                    console.log(`   üéØ Condici√≥n: ${policy.qual}`);
                    console.log('');
                });
            }
            console.log('');
        }

        // Verificar espec√≠ficamente auth.uid() sin (select ...)
        console.log('üö® VERIFICACI√ìN DE AUTH.UID() PROBLEMA');
        console.log('-'.repeat(50));

        const problematicPolicies = policies.filter(p =>
            p.qual && (
                p.qual.includes('auth.uid()') &&
                !p.qual.includes('(select auth.uid())')
            )
        );

        if (problematicPolicies.length === 0) {
            console.log('‚úÖ No se encontraron pol√≠ticas problem√°ticas');
        } else {
            console.log(`‚ùå POL√çTICAS PROBLEM√ÅTICAS ENCONTRADAS: ${problematicPolicies.length}`);
            problematicPolicies.forEach(policy => {
                console.log(`‚ö†Ô∏è ${policy.tablename}.${policy.policyname}`);
                console.log(`   Condici√≥n: ${policy.qual}`);
                console.log('');
            });
        }

    } catch (error) {
        console.log('‚ùå ERROR:', error.message);
    }
}

verificarPoliciesActuales();
