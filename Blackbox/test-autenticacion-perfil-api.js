console.log('üß™ TEST AUTENTICACI√ìN - API PERFIL DE USUARIO');
console.log('=' .repeat(70));

const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4MTY3MzgsImV4cCI6MjA3MTM5MjczOH0.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

async function testAutenticacionPerfilAPI() {
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    console.log('üìÖ Fecha:', new Date().toISOString());
    console.log('üéØ Objetivo: Simular flujo completo de autenticaci√≥n en API');
    console.log('üîó Endpoint: /api/users/profile');
    console.log('');

    const resultados = {
        paso1_login: null,
        paso2_verificar_sesion: null,
        paso3_test_api_get: null,
        paso4_test_api_put: null,
        diagnostico: null,
        solucion: null
    };

    try {
        // =====================================================
        // PASO 1: SIMULAR LOGIN (obtener sesi√≥n v√°lida)
        // =====================================================
        console.log('üîç PASO 1: SIMULANDO LOGIN');
        console.log('-'.repeat(50));

        // NOTA: Para este test necesitamos credenciales v√°lidas
        // En un entorno real, usar√≠amos credenciales de test
        console.log('‚ö†Ô∏è NOTA: Este test requiere credenciales v√°lidas de usuario');
        console.log('üí° Para testing real: usar email/password de usuario existente');
        console.log('');

        // Simular login (comentado para evitar uso de credenciales reales)
        /*
        const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
            email: 'usuario@test.com',
            password: 'password123'
        });

        if (loginError) {
            console.log('‚ùå Error en login:', loginError.message);
            resultados.paso1_login = { error: loginError.message };
            return resultados;
        }

        console.log('‚úÖ Login exitoso');
        console.log(`   ‚îî‚îÄ User ID: ${loginData.user.id}`);
        console.log(`   ‚îî‚îÄ Email: ${loginData.user.email}`);

        resultados.paso1_login = {
            exitoso: true,
            user_id: loginData.user.id,
            email: loginData.user.email
        };
        */

        // Para este test, asumiremos que tenemos una sesi√≥n v√°lida
        // En la pr√°ctica, necesitar√≠amos credenciales reales
        console.log('üìã SIMULACI√ìN: Asumiendo sesi√≥n v√°lida existente');
        console.log('üí° En producci√≥n: usar credenciales reales para testing');
        console.log('');

        // =====================================================
        // PASO 2: VERIFICAR ESTADO DE SESI√ìN
        // =====================================================
        console.log('üîç PASO 2: VERIFICANDO ESTADO DE SESI√ìN');
        console.log('-'.repeat(50));

        const { data: sessionData, error: sessionError } = await supabase.auth.getSession();

        if (sessionError) {
            console.log('‚ùå Error obteniendo sesi√≥n:', sessionError.message);
            resultados.paso2_verificar_sesion = { error: sessionError.message };
        } else if (!sessionData.session) {
            console.log('‚ùå No hay sesi√≥n activa');
            resultados.paso2_verificar_sesion = { error: 'No hay sesi√≥n activa' };
        } else {
            console.log('‚úÖ Sesi√≥n activa encontrada');
            console.log(`   ‚îî‚îÄ User ID: ${sessionData.session.user.id}`);
            console.log(`   ‚îî‚îÄ Email: ${sessionData.session.user.email}`);
            console.log(`   ‚îî‚îÄ Expires: ${new Date(sessionData.session.expires_at * 1000).toISOString()}`);

            resultados.paso2_verificar_sesion = {
                exitoso: true,
                user_id: sessionData.session.user.id,
                email: sessionData.session.user.email,
                expires_at: sessionData.session.expires_at
            };
        }

        // =====================================================
        // PASO 3: SIMULAR REQUEST GET AL API (como si fuera desde el navegador)
        // =====================================================
        console.log('');
        console.log('üîç PASO 3: SIMULANDO REQUEST GET AL API');
        console.log('-'.repeat(50));

        // Para simular un request real al API, necesitar√≠amos:
        // 1. Las cookies de sesi√≥n del navegador
        // 2. Hacer el request HTTP con las cookies incluidas

        console.log('üìã AN√ÅLISIS T√âCNICO DEL FLUJO:');
        console.log('');
        console.log('üîÑ FLUJO NORMAL DE AUTENTICACI√ìN:');
        console.log('1. Usuario hace login ‚Üí obtiene cookies de sesi√≥n');
        console.log('2. Cookies se almacenan en navegador');
        console.log('3. Usuario va a /profile ‚Üí middleware verifica cookies');
        console.log('4. API route lee cookies ‚Üí valida sesi√≥n con Supabase');
        console.log('5. Si v√°lido ‚Üí procesa request, si no ‚Üí error 401');
        console.log('');

        console.log('üéØ PUNTO DE FALLA IDENTIFICADO:');
        console.log('‚ùå El API route NO est√° recibiendo/leyendo las cookies correctamente');
        console.log('‚ùå O las cookies est√°n expiradas/corruptas');
        console.log('‚ùå O el cliente servidor no est√° configurado para leer cookies');
        console.log('');

        // =====================================================
        // PASO 4: VERIFICACI√ìN DE COOKIES (simulada)
        // =====================================================
        console.log('üîç PASO 4: VERIFICACI√ìN DE COOKIES');
        console.log('-'.repeat(50));

        console.log('üç™ COOKIES ESPERADAS EN NAVEGADOR:');
        console.log('- sb-[project]-auth-token ‚Üí JWT token de acceso');
        console.log('- sb-[project]-auth-token.0 ‚Üí Parte del JWT');
        console.log('- sb-[project]-auth-token.1 ‚Üí Parte del JWT');
        console.log('');

        console.log('üîß VERIFICACI√ìN MANUAL REQUERIDA:');
        console.log('1. Abrir DevTools ‚Üí Application ‚Üí Cookies');
        console.log('2. Verificar que existan cookies de Supabase');
        console.log('3. Confirmar que no est√©n expiradas');
        console.log('4. Verificar dominio correcto');
        console.log('');

        // =====================================================
        // PASO 5: DIAGN√ìSTICO Y SOLUCIONES
        // =====================================================
        console.log('üîç PASO 5: DIAGN√ìSTICO Y SOLUCIONES PROPUESTAS');
        console.log('-'.repeat(50));

        console.log('üîç POSIBLES CAUSAS DEL ERROR:');
        console.log('');

        console.log('1Ô∏è‚É£ COOKIES NO SE EST√ÅN ENVIANDO:');
        console.log('   ‚îî‚îÄ El navegador no incluye cookies en el request');
        console.log('   ‚îî‚îÄ Soluci√≥n: Verificar configuraci√≥n de fetch (credentials: include)');
        console.log('');

        console.log('2Ô∏è‚É£ SERVIDOR NO LEE COOKIES:');
        console.log('   ‚îî‚îÄ createClient() no est√° configurado para leer cookies');
        console.log('   ‚îî‚îÄ Soluci√≥n: Verificar configuraci√≥n en lib/supabase/server.ts');
        console.log('');

        console.log('3Ô∏è‚É£ SESI√ìN EXPIRADA:');
        console.log('   ‚îî‚îÄ Token JWT expirado en cookies');
        console.log('   ‚îî‚îÄ Soluci√≥n: Refrescar sesi√≥n o hacer re-login');
        console.log('');

        console.log('4Ô∏è‚É£ MIDDLEWARE NO FUNCIONA:');
        console.log('   ‚îî‚îÄ Middleware no est√° redirigiendo correctamente');
        console.log('   ‚îî‚îÄ Soluci√≥n: Verificar configuraci√≥n en middleware.ts');
        console.log('');

        console.log('üõ†Ô∏è SOLUCIONES PROPUESTAS:');
        console.log('');

        console.log('‚úÖ SOLUCI√ìN 1: VERIFICAR COOKIES EN NAVEGADOR');
        console.log('   1. Ir a perfil de usuario');
        console.log('   2. Abrir DevTools ‚Üí Network');
        console.log('   3. Ver request a /api/users/profile');
        console.log('   4. Verificar que incluya cookies');
        console.log('');

        console.log('‚úÖ SOLUCI√ìN 2: VERIFICAR CONFIGURACI√ìN SERVIDOR');
        console.log('   Revisar: Backend/src/lib/supabase/server.ts');
        console.log('   Asegurar que createClient() lea cookies correctamente');
        console.log('');

        console.log('‚úÖ SOLUCI√ìN 3: PROBAR CON SESI√ìN FRESCA');
        console.log('   1. Hacer logout');
        console.log('   2. Hacer login nuevamente');
        console.log('   3. Intentar actualizar perfil');
        console.log('');

        console.log('‚úÖ SOLUCI√ìN 4: DEBUGGING DEL API ROUTE');
        console.log('   Agregar logs en: Backend/src/app/api/users/profile/route.ts');
        console.log('   Para ver qu√© est√° recibiendo el servidor');
        console.log('');

        // =====================================================
        // RESULTADOS FINALES
        // =====================================================
        console.log('üìä RESULTADOS DEL DIAGN√ìSTICO');
        console.log('='.repeat(70));

        resultados.diagnostico = 'API route no reconoce sesi√≥n del usuario autenticado';
        resultados.solucion = 'Verificar cookies, configuraci√≥n servidor y sesi√≥n';

        console.log('üéØ DIAGN√ìSTICO FINAL:');
        console.log(`   ‚îî‚îÄ Problema: ${resultados.diagnostico}`);
        console.log(`   ‚îî‚îÄ Soluci√≥n: ${resultados.solucion}`);
        console.log('');

        console.log('üìã PR√ìXIMOS PASOS RECOMENDADOS:');
        console.log('1. ‚úÖ Verificar cookies en navegador');
        console.log('2. ‚úÖ Revisar configuraci√≥n servidor Supabase');
        console.log('3. ‚úÖ Probar con sesi√≥n fresca');
        console.log('4. ‚úÖ Agregar debugging al API route');
        console.log('5. ‚úÖ Testear endpoint directamente');
        console.log('');

        console.log('üíæ RESULTADOS GUARDADOS EN: test-autenticacion-perfil-resultado.json');

        // Guardar resultados
        const fs = require('fs');
        fs.writeFileSync(
            'test-autenticacion-perfil-resultado.json',
            JSON.stringify(resultados, null, 2)
        );

        console.log('‚úÖ TEST DE AUTENTICACI√ìN COMPLETADO');

        return resultados;

    } catch (error) {
        console.error('‚ùå Error cr√≠tico en test:', error.message);
        resultados.diagnostico = 'Error cr√≠tico en test de autenticaci√≥n';
        resultados.solucion = 'Revisar configuraci√≥n general de Supabase';
        return resultados;
    }
}

// Ejecutar test
if (require.main === module) {
    testAutenticacionPerfilAPI().catch(console.error);
}

module.exports = { testAutenticacionPerfilAPI };
