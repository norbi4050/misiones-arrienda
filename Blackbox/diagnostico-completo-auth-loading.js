const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO COMPLETO - CARGA INFINITA EN AUTENTICACI√ìN\n');

// Verificar variables de entorno
console.log('üìã VERIFICANDO VARIABLES DE ENTORNO:');
const envPath = path.join(process.cwd(), 'Backend', '.env.local');
const envExamplePath = path.join(process.cwd(), 'Backend', '.env.example');

if (fs.existsSync(envPath)) {
  console.log('‚úÖ Archivo .env.local encontrado');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const hasSupabaseUrl = envContent.includes('NEXT_PUBLIC_SUPABASE_URL');
  const hasSupabaseKey = envContent.includes('NEXT_PUBLIC_SUPABASE_ANON_KEY');

  console.log(`   - NEXT_PUBLIC_SUPABASE_URL: ${hasSupabaseUrl ? '‚úÖ Presente' : '‚ùå Faltante'}`);
  console.log(`   - NEXT_PUBLIC_SUPABASE_ANON_KEY: ${hasSupabaseKey ? '‚úÖ Presente' : '‚ùå Faltante'}`);
} else {
  console.log('‚ùå Archivo .env.local NO encontrado');
  if (fs.existsSync(envExamplePath)) {
    console.log('‚ÑπÔ∏è  Archivo .env.example encontrado - usar como referencia');
  }
}

// Verificar configuraci√≥n de Supabase
console.log('\nüîß VERIFICANDO CONFIGURACI√ìN DE SUPABASE:');
try {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Variables de entorno de Supabase no configuradas');
    console.log('   Aseg√∫rate de tener NEXT_PUBLIC_SUPABASE_URL y NEXT_PUBLIC_SUPABASE_ANON_KEY');
    process.exit(1);
  }

  console.log('‚úÖ Variables de entorno configuradas');
  console.log(`   URL: ${supabaseUrl.substring(0, 30)}...`);
  console.log(`   Key: ${supabaseKey.substring(0, 20)}...`);

  // Probar conexi√≥n
  console.log('\nüåê PROBANDO CONEXI√ìN CON SUPABASE:');
  const supabase = createClient(supabaseUrl, supabaseKey, {
    auth: {
      persistSession: false,
      autoRefreshToken: false
    }
  });

  // Verificar conexi√≥n b√°sica
  const { data, error } = await supabase.auth.getSession();

  if (error) {
    console.log('‚ùå Error de conexi√≥n:', error.message);
  } else {
    console.log('‚úÖ Conexi√≥n b√°sica exitosa');
  }

  // Verificar tabla users
  console.log('\nüìä VERIFICANDO TABLA USERS:');
  const { data: usersData, error: usersError } = await supabase
    .from('users')
    .select('count')
    .limit(1);

  if (usersError) {
    console.log('‚ùå Error al acceder tabla users:', usersError.message);
    console.log('   Posibles causas:');
    console.log('   - La tabla no existe');
    console.log('   - Pol√≠ticas RLS bloqueando acceso');
    console.log('   - Permisos insuficientes');
  } else {
    console.log('‚úÖ Tabla users accesible');
  }

  // Verificar pol√≠ticas RLS
  console.log('\nüîí VERIFICANDO POL√çTICAS RLS:');
  const { data: policiesData, error: policiesError } = await supabase
    .rpc('get_policies_info');

  if (policiesError) {
    console.log('‚ö†Ô∏è  No se pudo verificar pol√≠ticas RLS autom√°ticamente');
    console.log('   Error:', policiesError.message);
  } else {
    console.log('‚úÖ Pol√≠ticas RLS verificadas');
    console.log('   Pol√≠ticas encontradas:', policiesData?.length || 0);
  }

} catch (error) {
  console.log('‚ùå Error durante diagn√≥stico:', error.message);
}

// Verificar archivos de configuraci√≥n
console.log('\nüìÅ VERIFICANDO ARCHIVOS DE CONFIGURACI√ìN:');
const filesToCheck = [
  'Backend/src/hooks/useSupabaseAuth.ts',
  'Backend/src/lib/supabase/client.ts',
  'Backend/src/middleware.ts',
  'Backend/src/app/login/page.tsx',
  'Backend/src/app/register/page.tsx',
  'Backend/src/app/publicar/page.tsx'
];

filesToCheck.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Encontrado`);
  } else {
    console.log(`‚ùå ${file} - NO encontrado`);
  }
});

// Recomendaciones
console.log('\nüí° RECOMENDACIONES PARA SOLUCIONAR CARGA INFINITA:');
console.log('1. Verificar que las variables de entorno est√©n correctamente configuradas');
console.log('2. Asegurarse de que la tabla users existe en Supabase');
console.log('3. Verificar que las pol√≠ticas RLS permitan el acceso adecuado');
console.log('4. Comprobar que el middleware no est√© causando bucles de redirecci√≥n');
console.log('5. Revisar la consola del navegador en busca de errores de JavaScript');
console.log('6. Verificar que el hook useSupabaseAuth no tenga dependencias circulares');

console.log('\nüîç Para m√°s detalles, ejecuta:');
console.log('   npm run dev');
console.log('   Abre la consola del navegador y verifica errores');
console.log('   Revisa las pesta√±as Network para ver si hay peticiones fallidas');

console.log('\n‚ú® Diagn√≥stico completado.');
